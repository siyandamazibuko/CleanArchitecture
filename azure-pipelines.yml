trigger:
 - master
 - dev 
 - features/*
 - refs/tags/*

name: 0.0.$(Rev:r)

variables:
- name: system.debug
  value: false
- name: project-name 
  value: CleanArchitecture.Api
- name: solution
  value: '**/*.sln'
- name: build-configuration
  value: Release
- name: projects
  value: '**/$(project-name).csproj'   
- name: agents
  value: enablement-linux-agents-full
- name: dotnet-version
  value: 5.0.x
- name: tag-version
  value: '1.0.0'
- name: revision
  value: $[counter(variables['tag-version'], 0)]
- name: package-version
  value: $(GitVersion.SemVer).$(revision)
- name: build-version
  value: $(GitVersion.SemVer)-$(revision)
  
stages:
- stage: build
  displayName: build
  variables:  
    codecoverage.enabled: true

  jobs:
  - job: build
    displayName: build
    pool:
      name: $(agents)
    workspace:
      clean: all
      
    steps:        
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.x'
        preferLatestVersion: true

    - task: GitVersion@5
      displayName: 'Version assemblies'
      inputs:
        configFilePath: devops/config/GitVersion.yml
        updateAssemblyInfo: true
        runtime: 'core'

    - task: UseDotNet@2
      displayName: 'Set .net version: $(dotnet-version)'
      inputs:
        version: $(dotnet-version)
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - bash: echo "##vso[build.updatebuildnumber]$(build-version)"
      displayName: 'Set build number'  

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'config'
        nugetConfigPath: '$(Build.SourcesDirectory)/devops/config/NuGet.config'
        noCache: true
        verbosityRestore: 'minimal'

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet build solution'
      inputs:
        projects: '$(solution)'
        arguments: '--verbosity minimal --configuration $(build-configuration) -p:Version=$(package-version) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet unit tests'
      inputs:
        command: test
        projects: |
          **/CleanArchitecture.UnitTests.csproj
        arguments: '--configuration $(build-configuration) --no-build /p:CollectCoverage=true "/p:CoverletOutputFormat=\"opencover,json,Cobertura\"" /p:CoverletOutput="$(Build.SourcesDirectory)/coverage/"  /p:MergeWith="$(Build.SourcesDirectory)/coverage/coverage.json"'
      continueOnError: false
      
    - task: DotNetCoreCLI@2
      displayName: Push Nuget Package
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Agent.BuildDirectory)/**.nupkg
          -s https://www.nuget.org/nuget
    
    - task: DotNetCoreCLI@2
      displayName: 'Dotnet publish artifacts'
      inputs:
        command: publish
        publishWebProjects: false
        projects:  $(projects)
        arguments: '--verbosity minimal --configuration $(build-configuration) --no-build --output $(drop)'   

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet publish CleanArchitecture.Tools.Postgres'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        command: publish
        publishWebProjects: false
        projects: |
          **/CleanArchitecture.Tools.Postgres.csproj
        arguments: --verbosity minimal --configuration $(build-configuration) --no-build --output $(drop)/database
        zipAfterPublish: false                         